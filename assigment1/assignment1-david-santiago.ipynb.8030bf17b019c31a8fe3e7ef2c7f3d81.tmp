clfs_metrics = {}

for ft_idx, ft_name in enumerate(feature_names):
    # select relevant feature
    X_train_ft = X_train[:, [ft_idx]]
    X_test_ft = X_test[:, [ft_idx]]
    # fit gaussian classifer and predict on the test data
    clf = GaussianClassifier()
    clf.fit(X_train_ft, y_train)
    y_test_pred = clf.predict(X_test_ft)
    # calculate performance metrics
    accuracy = accuracy_score(y_test_pred, y_test)
    precision = precision_score(y_test_pred, y_test)
    recall = recall_score(y_test_pred, y_test)
    # save metrics to dict
    clfs_metrics[ft_name] = [accuracy, precision, recall]

    print("Feature: ", ft_name)
    print("--" * 15)
    print("Parameters:")
    print(
        " Mean: \n",
        "  Class 0: ",
        clf.means[0][0],
        "\n   Class 1: ",
        clf.means[1][0],
        "\n Variance: \n",
        "  Class 0: ",
        clf.cov[0][0][0],
        "\n   Class 1: ",
        clf.cov[1][0][0],
    )
    print("--" * 15)
    print("Performance:")
    print(f" Accuracy: {accuracy}")
    print(f" Precision: {precision}")
    print(f" Recall: {recall}")
    print("==" * 20 + "\n\n")
