# train classifier on the best feature
best_ft_idx = list(feature_names).index(best_ft)
X_ft = X[:, [best_ft_idx]]
clf = GaussianClassifier()
clf.fit(X_ft, y)

xs = np.linspace(X_ft.min(), X_ft.max(), 100).reshape(-1, 1)
probs = clf.predict_proba(xs)
probs_negative = probs[:, 0]
probs_positive = probs[:, 1]

# decision boundaries
left_bound = np.where(probs_negative < probs_positive)[0][0]
right_bound = np.where((probs_positive < probs_negative) == False)[0][-1] + 1

plt.figure(figsize=(15, 5))
plt.title(f"{best_ft}-feature posterior probabilities")
plt.plot(xs.reshape(-1), probs_negative, label="Negative class")
plt.plot(xs.reshape(-1), probs_positive, label="Positive class")
plt.axvline(x=xs[left_bound], color="r")
plt.axvline(x=xs[right_bound], color="r")
plt.legend()
plt.show()
