# univariate gaussian classifier with best feature
best_ft_idx = list(feature_names).index(best_ft)
X_train_ft = X_train[:, [best_ft_idx]]
X_test_ft = X_test[:, [best_ft_idx]]

# train classifier
clf = GaussianClassifier()
clf.fit(X_train_ft, y_train)
y_pred_uni = clf.predict_proba(X_test_ft)

# compute false positive and true positive rates
fpr_uni, tpr_uni, thresholds_uni = roc_curve(y_test, y_pred_uni[:, 1])

# bivariate gaussian classifier with best pair of features
ft1 = list(feature_names).index("Height")
ft2 = list(feature_names).index("Shell weight")
X_train_fts = X_train[:, [ft1, ft2]]
X_test_fts = X_test[:, [ft1, ft2]]

# train classifier
clf = GaussianClassifier()
clf.fit(X_train_fts, y_train)

# set the covariance matrix to a constant identity
unique_var = X_train_fts.var()
clf.cov = np.stack([np.diag([unique_var, unique_var]) for _ in range(2)], 0)
y_pred_bi = clf.predict_proba(X_test_fts)

# compute false positive and true positive rates
fpr_bi, tpr_bi, thresholds_bi = roc_curve(y_test, y_pred_bi[:, 1])

# plot ROC curves for both univariate and bivariate classifiers
plt.plot(fpr_uni, tpr_uni, color="r", lw=2, label="Height ft")
plt.plot(fpr_bi, tpr_bi, color="b", lw=2, label="Shell weight and height fts")
plt.plot([0, 1], [0, 1], color="g", lw=2, linestyle="--")
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Receiver operating characteristic (ROC) curve")
plt.legend(loc="lower right")
plt.show()
